# About

CacheOrBust is a special-purpose cache for HTTP requests. Requests for pages
which are not yet cached immediately return an empty response, and enqueue a
request to be made to the upstream HTTP server in the background. When the
background request completes, the response body is cached.

Requests to CacheOrBust are made using a modified subset of the memcached
protocol. Most memcached client libraries should work with CacheOrBust with
little or no modification.

To request a page from the cache, issue a memcached `get` command with two
keys: a unique key to identify the page in the cache, and the full URL of the
resource to be cached. It may be necessary to configure your memcached client
library with a larger maximum key length than normal, as some URLs can be quite
long.


# Running the Service

CacheOrBust is built as a "pluggable server" for Kyoto Tycoon. The full path
to ktcacheorbust.so should be given to the `-plsv` option to `ktserver`:

    $ ktserver -plsv /usr/local/lib/ktcacheorbust-1.0.so

CacheOrBust understands several options which can be set using the `-plex`
option to `ktserver`:

* `host`: sets the hostname for the listening socket [default: localhost]
* `port`: sets the port number for the listening socket [default: 6080]
* `url_prefix`: sets the URL prefix to prepend to the key (e.g. the IAS server endpoint)
* `strip_prefix`: sets the URL prefix to prepend to the key (e.g. the IAS server endpoint)
* `server_threads`: number of threads to handle memcached requests [default: 16]
* `fetcher_threads`: number of threads to handle background HTTP fetches [default: 16]
* `ttl`: number of seconds for which cached results are served before re-fetching
  from the upstream server [default: 3600]
* `keepalive`: if "true", background HTTP requests will use HTTP Keep-Alive
   requests when requesting multiple URLs from the same host [default: false]
* `log_keys`: if "true", log keys requested at the INFO level [default: false]

A good starting point is:

    $ ktserver -plsv /usr/local/lib/ktcacheorbust-1.0.so -plex "port=1234#ttl=43200"


# Using the Service

CacheOrBust uses a variant and subset of the text-based memcached protocol.
The memcached protocol was chosen for its low overhead and suitability for
use in performance-sensitive applications (as opposed to HTTP).

CacheOrBust supports `get`, `stats`, `flush_all` commands from the memcached
protocol. The `stats` and `flush_all` commands are supported exactly as
described in [the memcached protocol
documentation](https://github.com/memcached/memcached/blob/master/doc/protocol.txt);
`get` works differently by necessity. All other commands are not supported.

The `get` command accepts 1 to 3 arguments:

One argument (key is appended to `url_prefix` to populate the cache):

    get <key>

Two arguments (the URL is used to populate the cache, the key can be anything):

    get <key> <url>

Three arguments (NOTE: TTL override is only supported for the 3 argument version):

    get <key> <url> [ttl]

The `key` is a unique key within the cache. If a value for the key already
exists, then the cached contents of the `url` is immediately returned; if
not, the `url` is fetched in the background, and CacheOrBust returns an
empty response (no `VALUE` line in the memcached protocol) immediately.
Subsequent requests for the `key` made after the `url` is fetched return the
contents of the `url`.

Cached contents are stored for `ttl` seconds. `ttl` defaults to the value
specified at server startup, or 3,600 seconds (1 hour) if no default is
specified.


# Install

CacheOrBust uses autotools, which can be installed through your
distribution's package manager, and depends on libraries and headers from
Kyoto Cabinet (http://fallabs.com/kyotocabinet/) and Kyoto Tycoon (http://fallabs.com/kyototycoon/).

On CentOS 7 the following packages should be installed first:

    $ sudo yum install autoconf make automake gcc gcc-c++ libtool kyototycoon-devel kyotocabinet-devel
    NOTE: The kyoto*devel packages are in the Magnetic RPM repository

With dependencies installed, you can configure the build environment with:

    $ autoreconf --force --install
    $ export CFLAGS='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic'
    $ export CXXFLAGS='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic'
    $ export FFLAGS='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic -I/usr/lib64/gfortran/modules'
    $ export FCFLAGS='-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector-strong --param=ssp-buffer-size=4 -grecord-gcc-switches   -m64 -mtune=generic -I/usr/lib64/gfortran/modules'
    $ export LDFLAGS='-Wl,-z,relro '
    $ ./configure --prefix=/usr

And then build the CacheOrBust shared object library with:

    $ make
    $ [sudo] make install

Sample run command:

    $ ktserver -ls -port 6000 -plsv ./.libs/ktcacheorbust-1.0.so \
      -plex "port=7000#ttl=86400#server_threads=16#fetcher_threads=32#keepalive=false" \
      '*#opts=l#bnum=1048583#ktcapsiz=40g#capsiz=40g#dfunit=8'
